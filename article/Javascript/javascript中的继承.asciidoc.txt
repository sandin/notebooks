= 浅谈Javascript中的继承 =
:language: javascript

== Javascript中的面向对象(类的定义与继承) ==

首先来看下在javascript中定义类(class)，并实现类的继承, 这里其实实在模拟其他语言中的 Class 定义, 这里是最简单的入门知识, 只是让我们先来回顾下如果在js利用构造函数来实现继承模式, 非菜鸟可以直接跳过看下一段, 那里我们将分析下原型链。 

.基类
[source]
-----------------------------------------------------------
//构造函数中储存类的属性 
function ClassA(name) 
{ 
    this.name = name; 
} 

//原型对象中储存类的方法 
ClassA.prototype.getName = function() 
{ 
    alert(this.name); 
} 
-----------------------------------------------------------

.子类
[source]
-----------------------------------------------------------
//类的继承 
function ClassB(name, age) 
{ 
    //使用对象冒充方式实现类的属性继承 
    ClassA.call(this,name); 
    //定义子类的新属性 
    this.age = age; 
} 

//使用原型链实现类的方式继承 
ClassB.prototype = new ClassA(); 
//定义子类的新方法 
ClassB.prototype.getAge = function() 
{ 
    alert(this.age); 
} 
-----------------------------------------------------------

.使用
[source]
-----------------------------------------------------------
//实例化 
var jack = new ClassA('jack'); 
jack.getName(); 
//alert 'jack' 
var john = new ClassB('john',18); 
john.getName(); 
//output 'john' 
john.getAge(); 
//output 18 
-----------------------------------------------------------

其实使用原型链是一种节省内存的方法, 比如多个对象可以使用相同的 `prototype` 中的方法, 但是如果你的对象只会被实例化一次, 那么就没有必要去使用它, 而直接使用对象, 例如:
[source]
------------------------------------------------------------
var MyClass = {
    name : 'lds',
    age:  99,
    getName : function() {
        return this.name;
    }
}
------------------------------------------------------------

而如果需要继承, 也可以使用差异化继承模式. 这里我们先来谈下 `prototype` .
    

== 原型prototype ==

如果要谈js中的继承, 那么就必须先研究原型 `prototype` , 因为它是js继承的根本.

[NOTE]
============================================
我建议最好理解原型链的方法就是把 `firebug` 打开, 然后查看 `DOM` 标签下去查看现有的一些红色的构造函数, 他们每个都会有一个 `prototype` 属性, 这样的树型结构更为直观.
============================================

简单的看, 可以把原型链接看作是基类和子类的继承关系, 但又不完全是, 甚至可以说它是种更为灵活的设计.

.这里用伪代码先解释:
[source]
------------------------------------------------
// 定义两个父子类
function ClassA() {}
function ClassB() {}
ClassB.prototype = new ClassA();

// 实例对象
var objB = new ClassB();

// 原型链把 ClassA 和 ClassB 链接了起来
objB.constructor == ClassB 
ClassB.prototype.constructor == ClassA
------------------------------------------------

首先来讲最下面的 *对象* ,每个对象都有一个 `constructor` 属性, 该属性指向的是构造该对象的 *构造函数* .


而每个构造函数都有一个 `prototype` 属性, 它只是一个引用, 指向的是 *对象* , 而该 *对象* 也有一个 `constructor` 属性指向它的 *构造函数* , 整个链条就是这么连接的, 直到某个 *构造函数* 的原型是它自己的一个实例对象 . 


我把关键的这句话再重复一遍, 以引起你的注意: *直到某个构造函数的原型是它自己的一个实例对象* .


我们一直认为所有对象都是继承与 `Object` 的, 那么最底层的构造函数的原型不是应该指向 `Object` 之类的吗, 怎么会是指向自己的一个实例, 让我们进一步来看看到底是怎么回事.


我们采取回溯的方式来具体研究下, 从一个普通的 *对象* 开始:

[source]
-------------------------------------
// 首先我们实例化一个对象
var obj = new Person("jack"); 
-------------------------------------

因为用了 `new` 关键词, 所以 `Person` 是一个构造函数, 我们它是怎么定义的:
[source]
-------------------------------------

function Person(name) {
    this.name =  name;
}

-------------------------------------

现在我们指定 `Person` 的 `prototype` , 此时它的 `prototype` 就是空对象. 我们可以在 firebug 的控制台上检查下:

[source]
--------------------------------------
Person.prototype
// 输入的是 Object {}
--------------------------------------

而且很奇妙的地方是我们会看见这个 *空对象* 不是 `Object` 的一个实例对象, 而是 `Person` 的一个实例, 你会发现这个实例对象的 `constructor` 又指回了 `Person` 这个构造函数.

我们可以检验下这个奇妙的关系

[source]
-----------------------------------------
Person.prototype.constructor == Person
// true

Person.prototype.constructor.prototype.constructor == Person
// true
---------------------------------------

你会发现它可以一直这样循环下去, 这种机制确实很好玩, 但先暂时放在一边, 我们看看原型的真正用处.  

我们再定义另一个子类, 让它继承与我们的这个 `Person` ,看看会发生什么:
[source]
---------------------------------------------------------
function Men(name, age) {
    this.age = age;
}

// 将它的prototype指向 Person
Men.prototype = new Person();
---------------------------------------------------------
这里我们会看见每个 *构造函数* 的 `prototype` 其实都是一个具体的 *对象* (使用了 `new` 关键字, 它返回的总是个实例对象).


然后我们再来看看现在的关系:
`Men.prototype` 其实就是一个对象, 而这个对象的 `constructor` 又是指向了 `Person` 的, 所以 `Men` 和 `Person` 被联系了起来.

这里我们需要理解的  `Men` 和 `Person` 两个看起来是父子关系的构造函数, 其实并不是直接链接在一起的, 它们之间链接通过了一个实例对象:

[source]
--------------------------------------
Men.prototype instanceof Person
// true

// 这里我们可以清楚的看到他们是间接连接的, 中间通过了一个实例对象
Men.prototype.constructor == Person
// true
--------------------------------------

而 *原型链接* 的机制是这样的:

原型链接在 *修改对象* 时不起任何作用，当我们对某个对象作出改变时，不会触及该对象的原型。

原型链接只有在 *检索值* 时才被用到，如果我们尝试去获取对象的某个属性值，且该对象没有此属性名，那么 `javascript` 就会试着从原型对象中获取属性值。如果那个原型对象也没有该属性，那么再从它的原型中寻找，以此类推，直到找到为止，若最终也未找到则返回 `undefined` 。这个过程成为 *委托* 。

原型关系是一种 *动态* 的关系，一旦修改原型，则使用该原型的对象即时可见修改结果。

其实这种继承模式的好处是其他拥有 `Class` 类的语言所没有的, 这样灵活的动态链接, 可以说是 `javascript` 中比较伟大的地方. 比如在定了父类后, 对于父类的任何操作都会影响到子类, 这种特性是传统继承模式所无法比拟的.

== 继承 ==


javascript可以模拟那些基于类的模式，同时它也可以支持其他更具表现力的模式。

在基于类的语言中，对象是类的实例，并且类可以从另一个类继承。javascript是一门基于 *原型* 的语言，这意味着对象直接从其他对象继承。

=== 伪类 ===

javascript的原型存在着诸多矛盾，某些看起来有点像基于类的语言的复杂语法问题遮蔽了它的原型机制。它不容对象直接从其他对象继承，反而插入了一个多余的 *间接层* ，从而使构造器函数产生对象。

当一个函数对象被创建时，`Function`构造器产生的函数对象会运行类似的代码：

[source,javascript]
-----------------------------------------------
this.prototype = {constructor: this};
-----------------------------------------------

新函数对象被赋予一个 `prototype` 属性，其值是包含一个 `constructor` 属性且属性值为该新构造函数的实例象。该 `prototype` 对象是存放继承特征的地方。

NOTE: javascript没有去确定哪些函数以打算用来做构造器的，所有每个函数都会有一个 `prototype` 对象。

[NOTE]
在调用构造器函数是如果没有加上`new`前缀，那么构造器中的`this`将不会被绑定在新对象，而是绑定在'全局对象'上，从而破坏全局变量，而且也不会造成编译警告和运行警告。这是一个严重的语言设计错误。避免这个问题，有两个方法：全部构造器函数都约定首字大写；不使用`new`。


*伪类* 形式可以从不熟悉javascript的程序员提供便利，但它也隐藏了该语言的真实本质。在基于类的语言中，类的继承是代码重用的唯一方法。javascript有着更多且更好的选择。


=== 原型prototype ===

在一个纯粹的原型模式中，我们会摒弃类，转而专注于对象。基于原型的继承相比基于类的继承在概念上更为简单：一个新对象可以继承一个旧对象的属性。可以理解为：你通过改造一个有用的对象开始，接着可以构造更多和那个对象类似的对象。

[source,javascript]
------------------------------------------

var myMamal = {
       name     : 'liu',
       get_name : function () {
           return this.name;
       }
};

var myCat = Object.beget(myMammal);
myCat.name = 'ding';
myCat.age  = 23;
myCat.get_age = function () {
    return this.age;
};

-------------------------------------------

这是一种 *差异化继承* 。通过定义一个新的对象，我们指明了它与所基于的基本对象的差别。

其中的 `Object.beget` 是这样定义的, 这里其实在利用一些技巧来使得对象可以使用 `prototype` 来实现继承.
[source,javascript]
--------------------------------------------------

if (typeof Object.beget !== 'function') {
	Object.beget = function (o) {
		var F = function(){};  
		F.prototype = o;
		return new F();
	};
}

--------------------------------------------------


=== 函数化 ===

利用模块模式，得到私有变量和私有函数。

.伪代码模板：

[source,javascript]
------------------------------------------------

var constructor = function(spec, my) {
    var that,其他的私有实例变量；
    my = my || {};

    把共享的变量和函数添加到my中

    that = 一个新对象

    添加给that的特权方法

    return that;
}

------------------------------------------------

.实例：

[source,javascript]
------------------------------------------------

var mammal = function (spec) {
    var that = {};

    that.get_name = function () {
        return spec.name;
    };

    that.says = function () {
        return spec.saying || '';
    };

    return that;
};

var myMammal = manmal({name: 'herb'});

//继承
var cat = function (spec) {
    spec.saying = spec.saying || 'meow';
    //继承
    var that = mamal(spec);
    that.get_name = function () {
        return that.says();
    };
    return that;
};

--------------------------------------------------

函数化模式提供了一个处理父类方法的办法：

[source,javascript]
--------------------------------------------------

Object.method('superior', function (name) {
        var that   = this,
            method = that[name];
        return function () {
            return method.apply(that, arguments);
        };
});

---------------------------------------------------


== 结束语 ==

讲了这么多, 大概对javascript中的继承机制有所了解了, 那么再问最后一个问题: "所有对象都继承于 `Object` " 这句老话怎么理解, 你会发现其实任何类的原型都链不到 `Object` 本身, 那么一切之父的 `Object` 到底是什么, 所有对象又是怎么和它联系的, 你可以试试几个顶层对象:

[source]
-------------------------------------
Array.prototype
// 输出 [] , Array()的一个实例对象

Array.prototype.constructor
// Array() 本身

String.prototype
// String() 的一个实例对象

String.prototype.constructor
// String() 本身

Object.prototype
// Object() 的一个实例对象

Object.prototype.constructor
// Object 本身
-------------------------------------


所有顶层对象其实都是自己链接自己的. 那他们和 `Object` 是怎么链接起来的? 只能说 `Object` 是 `God` , 他说你们都是它的子孙, 你就是它的子孙. 这也就是为什么下面的语句永远为真的:

[source]
------------------------------------------
Array instanceof Object
String intanceof Object

//甚至:
Object instanceof Object

// 此处省去500行...
------------------------------------------
你拿什么去试都是永真, 只能说"普天之下莫非王土；率土之滨，莫非王臣;"

这里其实很奇怪, `instanceof` 语句通常都是判断一个 *对象* 是不是一个 *类* 的实例, 你不能用它去判断一个 *类* 是不是另一个 *类* 的实例, 而javascript中的构造函数一般都被理解为 *类* 的概念, 那么你再回头去看上面的那些语句

`Array` 是个构造函数, `Object` 也是个构造函数, 一般认为它们两个都是个 *类* ,但是当你用 `instanceof` 关键词时, 不仅不会报错, 而且它的结果还为真, 不管你是个 *类* 还是 *对象* , 反正只要用 `instanceof Object`, 永真, `Object` 不是 `God` 是什么? 

你可能说这只是 `instanceof` 操作符在 `javascript` 中的用法不同而已, 我们来演示下非 `God` 的世界, 你就明白了这不是语言和语言的区别, 而是凡人和神的区别:

[source]
---------------------------------------------

// 父类
function A() {}

// 子类
function B() {}
B.prototype = new A();

// 实例化对象
var a = new A();
var b = new B();

// 以下都为真, 这没有问题
a instanceof A;
b instanceof B;
b instanceof A;

// 下面来看对两个父子关系的构造函数来进行 instanceof 操作
B instanceof A;
// false
------------------------------------------------

可以说上面的代码的输出结果用任何一种语言都是一样的, 这也更一步证明了 `Object` 是 `Javascript` 世界的神, 没有其他解释了.

其他所有对象/构造函数都可以用原型链来互相联系, 都可以使用 `=` 号来去追寻到这种联系关系的真实存在, 但是 `Object` 绝对是个特例, 除了神和它自己, 你几乎不能用等号把任何对象和它联系到一起, 但是所有对象又应该是和它是存在关系的, 因为都是它的实例.

