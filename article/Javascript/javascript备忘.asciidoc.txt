:language: javascript

== undefined 不等于 null ==

`null` 是一个对象，`undefined` 是一个属性、方法或变量。存在null是因为对象被定义。如果对象没有被定义，而测试它是否是null，但因为没有被定义，它无法测试到，而且会抛出错误。

[source]
--------------------------------------
if(myObject !== null  && typeof(myObject) !== 'undefined') {

 //如果myObject是undefined，它不能测试是否为null，而且还会抛出错误
}

if(typeof(myObject) !== 'undefined' && myObject !== null) {
 //处理myObject的代码
} 
--------------------------------------


== ==
使浏览器的内存占用量长期达到100%,或者直接崩溃,多半是死循环造成的.并且不止FOR等语句会形成死循环,正则表达式也是造成死循环的可能性之一. 

== ==
document.write 只能用在文档还在解析的过程中,如果文档已经建立,再使用document.write,会刷新出一个新文档流. 

== ==
IE在解析文档的过程中,如果在容器还没有关闭的情况下,向该容器appendchild会出现致命的问题,导致IE无法继续解析文档,直接显示无法打开网页.改用document.write()即可. 


== jquery的不当使用导致内存泄漏 ==

首先，jquery有内部的防泄漏机制，它在unload里面卸载了所有绑定和引用，导致内存得以释放，但是如果将jquery对象存入了自定义的变量中后，会使内存泄漏成为一个问题。

过去看过一篇关于优化jquery性能的翻译文章，其中第三条便是“将jquery对象缓存起来”，也就是将jquery取得的DOM对象存入自定义的变量之中，以后要用到同一元素时就避免了再让jquery的查询引擎重新去DOM中搜索，大大节省的资源和时间从而极大的提高了性能，也就是一种缓冲机制。这种缓存技巧是值得提倡的，但决不能乱用，否则百分之百的会造成内存泄漏，不管是弱智的ie还是强大的firefox，都无法逃避。 


=== 选择器使用不当 ===

如下的子查询也是那篇优化jquery性能中提倡的：

[source]
--------------------------------------
$tabs = $('#main');  
$tabs.find(".ui-tabs-nav").sortable({axis:'y'});
$tabs = null;

// $tabs包含的DOM元素会泄漏出去。

// 还有种选择器也会造成同样情况：

$tabs = $('#main'); 
$li      = $('li',$tabs);
$tabs = null;

// 这种选择同样也会造成内存泄漏，原因不详。

--------------------------------------

=== 事件绑定时自身循环引用 ===

[source]
--------------------------------------
var $tab_items = $("#main ul:first li").droppable({
    tolerance: 'pointer',
    accept: ".connectedSortable li",
    hoverClass: "ui-state-hover",
    drop: function(ev, ui) {
        var $item = $(this);
        var $list = $($item.find('a').attr('href')).find('.connectedSortable');

        ui.draggable.hide('slow', function() {
            // auto change tab on/off
            $tabs.tabs('select', $tab_items.index($item));
            $(this).prependTo($list).show('slow');
        });//end hide
        $item = null;
        $list = null;
    }
  });
  $tab_items = null;
  $tabs = null;
--------------------------------------

在对$tab_item元素进行绑定的回调函数里，又引用了该元素本身，因此会导致内存泄漏，即时后面将其显示设为null,也不能避免该问题。

元素之间的循环引用 

[source]
--------------------------------------
 // tabs && drop to tabs
  $tabs = $("#main").tabs({
    //selected: 0,
    panelsTarget : '#js_panelsTarget',
    spinner: 'Retrieving data...',
    cache: true,
    cookie: {expires: 30,name:'ui-tab'},
    select: function(event, ui) {
    }
  });

  var $tab_items = $("#main ul:first li").droppable({
    tolerance: 'pointer',
    accept: ".connectedSortable li",
    hoverClass: "ui-state-hover",
    drop: function(ev, ui) {
        ui.draggable.hide('slow', function() {
            // auto change tab on/off
            $tabs.tabs('select', $('#main ul:first li').index($item));
            $(this).prependTo($list).show('slow');
        });//end hide
        $item = null;
        $list = null;
    }
  });
  $tab_items = null;
--------------------------------------

这个和在自身回调函数中引用自己是一个道理。


== `!!` 的使用 ==

javascript中两个感叹号用于判断变量是否为null,undefined,'',0。 
注意：该变量必须声明过，否则报错。 

测试代码如下： 

[source]
------------------------------------------------------
var a = 123; 
alert(!!a); 
//output true 
//未申明变量 
alert(!!b); 
//output ReferenceError: b is not defined 
var b; 
alert(!!b); 
//output false 
b = null; 
alert(!!b); 
//output false 
b=''; 
alert(!!b); 
//output false 
b=0; 
alert(!!b); 
//output false 
b=1; 
alert(!!b); 
//output true 
---------------------------------------------------------


== Javascript设计模式--工厂模式(factory) ==

.定义一个父类
[source]
-----------------------------------------------------------
/**  
 * class Command 
 * Command的超类 
 *  
 * @param params 
 *  
 * @return  
 */ 
function Command(params) 
{ 
  this.params = params || {}; 
} 
Command.prototype.setParams = function(params) 
{ 
  this.params = params; 
} 
-----------------------------------------------------------

.定义一系统子类
[source]
-----------------------------------------------------------
/**  
 * class AddNoteCommand extends Command 
 *  
 * @param params 
 *  
 * @return  
 */ 
function AddNoteCommand(params) 
{ 
  Command.call(this); 
  this.name = 'addNote'; 
} 
AddNoteCommand.prototype = new Command(); 


AddNoteCommand.prototype.success = function() 
{ 
    //some code 
} 


/**  
 * class CreateCategoryCommand extends Command 
 *  
 * @param params 
 *  
 * @return  
 */ 
function CreateCategoryCommand(params) 
{ 
  Command.call(this); 
  this.name = 'CreateCategory'; 
} 
CreateCategoryCommand.prototype = new Command(); 


CreateCategoryCommand.prototype.success = function() 
{ 
    //some code 
} 
CreateCategoryCommand.prototype.beforeSubmit = function() 
{ 
   //some code 
} 
CreateCategoryCommand.prototype.getExtraData = function() 
{ 
  //some code 
} 
-----------------------------------------------------------

.定义工厂类
[source]
-----------------------------------------------------------

/**  
 * Class CommandFactory 
 *  
 * @param commandType 
 *  
 * @return  
 */ 
function CommandFactory(commandType) 
{ 
  var command = ucwords(commandType);  //ucwords为自定义函数 
  command += 'Command'; 
  //console.log(command); 
  //确认所请求的Command类是存在的 
  if (eval('typeof ' + command + ' != "undefined"')) { 
        return eval('new ' + command + '()'); 
  } else { 
        //如果不存在,则返回一个超类做替代,超类不调用任何回调函数 
        return new Command(); 
  } 
} 
-----------------------------------------------------------

.实例化 
[source]
-----------------------------------------------------------
  var command_1 = ‘addNote'; 
  var command_2 = 'createCategory'; 
  var c1 = new CommandFactory(‘addNote'); //返回AddNoteCommand的实例 
  var c2 = new CommandFactory('createCategory'); //返回CreateCategory的实例 
  var c3 = new CommandFactory('unexistedCommand'); //返回Command的实例 
-----------------------------------------------------------


== addLoadEvent ==

在没有jQuery情况下兼容IE,FF的window.onload事件绑定函数

[source]
-----------------------------------------------------------
function addLoadEvent(func) {
    var oldonload = window.onload;
    if (typeof window.onload != 'function' ) {
        window.onload = func;
    else {
        window.onload = function(){
            oldonload();
            func();
        }
    }
} 
-----------------------------------------------------------


== javascript中array和object的关系 ==

Javascript中存在一个叫做伪数组的的东西, 它介于Object和Array之间, 最重要的使用就是函数的参数数组 arguments , 这里我们来讨论下 Array 和 Object 之间到底是个怎样的关系,  为什么可以出现类似伪数组的灰色地带出现. 

如所有对象一样，Array也继承于Object，因此Array和Object的内部结构其实差不多，也可以利用Array的内置方法来操作Object对象，使其具有伪数组的功能； 
代码示范： 

.首先来看看Array的内部结构 

[source]
-----------------------------------------------------------

//确定Array继承于Object 
Array instanceof Object 
// true 

var arr = [0,1,2]; 
// 相当于以数字索引为key，以数组各值为value,然后带一个length属性的Object对象 
var obj = {0:0, 1:1, 2:2, length:3}； 
-----------------------------------------------------------

.用Array内置方法操作Object对象： 
[source, bash]
-----------------------------------------------------------

// 使用Array的push方法操作Object对象

var obj = {};
Array.prototype.push.call(obj,123);
// 1

// push后，Object对象自动添加length属性，并以数字索引做key
console.log(obj);
// Object 0=123 length=1

// 使用Array的slice方法操作Object对象
Array.prototype.slice.call(obj);
// [123]

//手工添加数字索引的属性，将不会被pop/slice等函数读取到。
obj[1] = 312;
// 312
console.log(obj);
// Object 0=123 length=1 1=312

//使用slice或pop去读取该伪数组
//只会读出push方法写入的属性
Array.prototype.slice.call(obj，0);
// [123]
Array.prototype.pop.call(obj);
// 123
console.log(obj);
// Object length=0 1=312
-----------------------------------------------------------

.也可以直接让Object拥有Array方法： 
[source, bash]
-----------------------------------------------------------

// firebug控制台

>>> Object.prototype.pop   = Array.prototype.pop;
>>> Object.prototype.slice = Array.prototype.slice;
>>> Object.prototype.push  = Array.prototype.push;

>>> var obj = {};
>>> obj.push(123);
>>> obj.pop();
123

>>> obj
Object length=0

>>> obj.push(1,2,3);
3

>>> obj.slice();
[1, 2, 3]

>>> obj
Object length=3 0=1 1=2 2=3

>>> obj
Object length=3 0=1 1=2 2=3

>>> obj[0];
1

-----------------------------------------------------------

.将普通对象转为为 arguments 的伪数组

[source]
-----------------------------------------------------------

var obj = {};
Array.prototype.push.call(obj, 'arg1');
// 注意,这里push的调用主体是obj,所有push将会直接对原数组(这里是obj对象)直接进行操作,返回值也和push方法的返回值是一样的, 返回的是一个数值, 而非返回该数组本身.

args = Array.prototype.slice.call(obj);
// 这里的slice方法也是Array.slice方法一样, 不会对原数组进行操作, 而是返回一个新数组.

// 此时args 已经是个伪数组, 和arguments一样使用
SomeFunc.apply(this, args);

-----------------------------------------------------------

== javascript 设计模式 - 观察者模式(Observer) ==

这里主要介绍一些观察者模式在Javascript中的实现方法:

.Observer接口
[source]
-----------------------------------------------------------

/*-------------- IObserver.interface.js ----------------*/ 
/**  
 * interface IObserver 
 *  
 * @return  
 */ 
function IObserver(){} 
IObserver.prototype.update = function(sender,msg){}  
-----------------------------------------------------------


.Subject接口
[source]
-----------------------------------------------------------

/*-------------- ISubject.interface.js ----------------*/

/**  
 * interface ISubject 
 *  
 * @return  
 */ 
function ISubject() 
{ 
  this._ObserverList = []; 
} 
ISubject.prototype.addObserver = function(observer) 
{ 
  this._ObserverList.push(observer); 
  return this; 
} 
ISubject.prototype.delObserver = function(observer){}  
ISubject.prototype.notify = function(observer,msg) 
{ 
  var msg = msg || {}; 
  for (i in this._ObserverList) { 
this._ObserverList[i].update(this,msg); 
  } 
  if (window.console && window.console.log) { 
console.log('notify at ' + new Date()); 
  } 
}  
-----------------------------------------------------------

.Subject实现类
[source]
-----------------------------------------------------------
/**  
 * class BindCenter implements ISubject 
 *  
 * @return  
 */ 
function BindCenter() 
{ 
  ISubject.call(this); 
}  
BindCenter.prototype = new ISubject();  
-----------------------------------------------------------


.Observer实现类
[source]
-----------------------------------------------------------
/**  
 * class BindAjaxForm implements IObserver 
 *  
 * @return  
 */ 
function BindAjaxForm() 
{  
  IObserver.call(this); 
} 
BindAjaxForm.prototype.update = function() 
{ 
    //some code 
    alert('yes,i do'); 
} 
-----------------------------------------------------------

.使用方法
[source]
-----------------------------------------------------------

/*------------------------ main.js ----------------------*/ 
    var bindCenter = new BindCenter(); 

    // 注册观察者
    bindCenter.addObserver(new BindHighLight) 
              .addObserver(new BindAjaxForm) 
              .addObserver(new BindDelButton) 
              .addObserver(new BindNotes) 
              .addObserver(new BindLoginForm); 

    // 通知所有观察者
    bindCenter.notify(); 
-----------------------------------------------------------

== jQuery源代码研究--伪数组 ==

在读jQuery源代码的过程中，发现一个不解的一小段代码： 
     
[source]
-----------------------------------------------------------
toArray: function() { 
    return slice.call( this, 0 ); 
}, 
//其中slice = Array.prototype.slice; 
-----------------------------------------------------------

从平时使用可得知，jQuery对象是一个Object，而非Array。例如：

[source]
-----------------------------------------------------------
$('div') 
//实质为： 
//Object
//0: HTMLDivElement
//1: HTMLDivElement
//2: HTMLDivElement
//3: HTMLDivElement
//4: HTMLDivElement
//5: HTMLDivElement
//context: HTMLDocument
//length: 6
//selector: "div"
//__proto__: Object

$('div').toArray(); 
//得到的则是： 
//Array
//0: HTMLDivElement
//1: HTMLDivElement
//2: HTMLDivElement
//3: HTMLDivElement
//4: HTMLDivElement
//5: HTMLDivElement
-----------------------------------------------------------

jQuery对象在转换成Array时只留下了DOM对象，神奇的去掉了其他属性。由此看出，jQuery运用了伪数组的特性。 

将jQuery相关的源代码简化如下：
[source]
-----------------------------------------------------------

      var arr = [1,2]; 
      var jq = function(){ 
        return new jq.prototype.init(arguments); 
      } 
      jq.prototype = { 
        init: function() { 
            this.length = 0; 
            //在此便是神奇之处，原来还可以这么用： 
            //使用Array原型中的push，将数组填充到对象中 
            Array.prototype.push.apply(this,arr); 
            return this; 
        }, 
        toArray: function() { 
            //使用Array原型中的slice，将数组读出来 
            //注意：这里只会读取Array.prototype.push到对象中的元素 
            //而对象其他的属性是不会读取的(如本例中的this.length) 
            return Array.prototype.slice.call(this,0); 
        } 
      } 

      //为了让inti实例化后对象也具有toArray方法，将原型又指回了jq的原型 
      jq.prototype.init.prototype = jq.prototype; 


    var o = jq(); 
    //Object 
    //0: 1
    //1: 2
    //length: 2
    //__proto__: Object 

    var a = o.toArray(); 
    // [1,2]  
    //length属性濡 
-----------------------------------------------------------


== filter() ==

`array.filter(fileterFunc,this);`

第二参数设置为 `this` ,可将当前 `this` 传递进 `fileterFunc` 中(即将 `filterFunc` 中的 `this` 设置为当前环境下的 `this` .

== 确保一个变量不为'undefined','',null ==

[source]
-----------------------------------------------------------
if (typeof b != 'undefined' && !!b) {
	console.log('b 存在,并且不为空')
}
-----------------------------------------------------------

== jQuery的CSS类选择器在不同浏览器下性能 ==

在浏览器支持 `querySelectorAll` 的情况下, jQuery是直接使用这个原生方法来支持类CSS选择器的(性能高), 对于不支持的浏览器(例如 IE6,7), 则使用独立的 `Sizzle.js` 来实现相同功能(性能中).

== jQuery中[name=xxx]选择器的性能 ==

例如选择 `<div name="xxx'></div>` 时.
`$('[name=xxx]')和 `$('div[name=xxx'])` 在性能上是一样的.

`$('[name=xxx'])` 在 `Sizzle.js` 模式中, 其实就是直接在调用 `document.getElementsByName('xxx')` , 只是它可以避免在IE6下 `id` 和 `name` 不分的BUG.
