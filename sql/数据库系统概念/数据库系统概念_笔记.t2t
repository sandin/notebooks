<数据库系统概念> 学习笔记
LDS
%%mtime(%Y-%m-%d)

%!encoding: UTF-8
%!target  : html


%TODO: 数据模式
%TODO: 数据独立性


                            + 数据抽象 +

++ 三个层次 ++
数据抽象的三个层次：物理层，逻辑层，视图层。

++ 模式 ++
数据库系统分为：物理模式，逻辑模式，子模式。

++ 数据独立性 ++
在某个层次上修改模式定义而不影响位于其上一层模式的能力叫做数据独立性。


                            + 数据模型 +

++ 定义 ++
数据模型是描述数据，数据联系，数据语义以及一致性约束的概念工具的集合。

++ 分类 ++
基于对象的逻辑模型；基于记录的逻辑模型；物理模型；

++ 基于对象的逻辑模型 ++
+++ 用于 +++
在逻辑层和视图层上描述数据。

+++ 特点 +++
提供灵活的结构组织能力，允许显式定义数据约束。

+++ 著名模型 +++

: 实体-联系模型 
  现实世界是由一组成为实体的基本对象以及这些对象间的联系构成的。

: 面向对象的模型
  一个对象即包括对象内存储在实例变量中的值，又包括对此对象进行操作的代码体（方法）。对象划分为不同的类。在物理层面，相同值的对象也可能不相同，其区别靠对象唯一的对象标识符来实现。

: 语义数据模型
  暂无

: 功能数据模型
  暂无


++ 基于记录的逻辑模型 ++

+++ 用于 +++
在逻辑层和视图层上描述数据。

+++ 特点 +++
既用来定义数据库的全局逻辑结构，又用来提供关于实现的高层描述。

+++ 著名模型 +++
: 关系模型
  用表的集合来表示数据和数据间的联系。（目前最受欢迎的模式）

: 网状模型
  数据用记录的集合来表示，数据间的联系用链接（可看作指针来表示）。任意图的集合。

: 层次模型
  与网状模型类似，只是组织成树的集合，而非任意图的集合。


++ 物理数据模型 ++

+++ 用于 +++
在最低层次上描述数据。

+++ 著名模型 +++
- 一致化模型
- 框架存储模型


-------------------------
以下按原书章节编号
-------------------------

                        + 第一章 +
++ 数据库语言 ++

+++ 数据定义语言 +++
数据库模式是用数据存储定义语言(DDL)来表示.DDL语句的编译结果是产生一个特殊文件中的一系列,称作数据字典或数据目录.

数据字典是一个包含元数据的文件.元数据是描述数据的数据.

+++ 数据操作语言 +++
两类数据操作语言(DML):
- 过程化的DML要求用户指定需要什么数据以及如何获得这些数据.
- 非过程划的DML只要求用户指定需要什么数据.


++ 事务管理 ++

: 原子性
  要么都发生,要么都不发生.
: 一致性
  A+B的和保持不变.
: 持久性
  即使发生故障,A和B的值也保持不变.


正确定义不同事务是程序员的任务,事务的定义应使之保持数据库的一致性.

原子性和持久性的保证则是数据库系统自身的任务.

++ 存储管理 ++
存储管理器是在数据库中存储的底层数据与应用程序及向系统提交的查询之间提供接口的程序模块.负责与文件管理器的交互.

++ 数据库管理员 ++
数据库管理员(DBA)的作用:
+ 模式定义,DDL.
+ 存储结构及存取方式定义.这些定义由数据存储和数据定义语言翻译器来翻译.
+ 模式及物理组织的修改.
+ 数据访问授权.
+ 完整性约束的定义.


++ 数据库用户 ++

用户类型:
- 应用程序设计人员,通过调用DML同系统进行交互.
- 富有经验的用户,直接通过数据查询语言来表达自己的要求,如分析员.
- 专门的用户,编写专门的,不适合传统数据处理模式的数据库应用程序的富有经验的用户.
- 新用户,没有经验的用户.通过已经写好的应用程序同系统进行交互.


++ 系统总体结构 ++

- 数据库管理系统:

- 查询处理器部件:
  - 应用程序目标码
  - 嵌入式DML预编译器
  - DML编译器
  - DDL解释器
  - 查询计算引擎

- 存储管理器部件:
  - 事务管理器
  - 缓冲区管理器
  - 文件管理器

- 磁盘存储器:
  - 索引
  - 统计数据
  - 数据文件
  - 数据字典


++ 总结 ++
数据库管理系统是由一个互相关联的数据的集合和一组可以用于访问数据的程序组成.


                         + 实体-联系(E-R)模型 +

++ 基本概念 ++
实体集,联系集,属性

+++ 实体集 +++
实体是现实世界中可区别于其他对象的"事件"或"物体".
每个实体有一组性质,其中一部分性质的取值可以唯一的标识实体.

实体集是具有相同类型及相同性质(属性)的实体集合,可以相交.
实体通过一组属性来表示,属性是实体集中每个成员具有的描述性性质.
每个属性有其允许的值的集合,成为该属性的域或值集.

E-R模型中的属性可按照如下的属性类型来划分:
- 简单属性和复合属性:
- 简单属性:不可再划分为更小的属性.
- 复合属性:可划分.复合属性可以是层次的(树状).
- 单值属性和多值属性:单个值/多个值.
- NULL属性:缺失或不知道
- 派生属性:可以从别的相关属性或实体派生(计算)出来.派生的基础属性成为基属性/存储属性.


属性命名:为避免混淆,不同实体的属性使用互不重复的属性名.

+++ 联系集 +++
- 联系是多个实体间的互相关联.
- 联系集是同类联系的集合.
- 实体集之间的关联成为参与,就是说,实体集E1,E2...参与联系集R.
- 实体在联系中的作用称为实体的角色.
- 联系也可能具有描述性属性.
- 参与联系集的实体集的数目成为联系集的度.


++ 设计问题 ++

+++ 用实体集还是用属性 +++
依赖于被建模的现实世界事实的结构,以及所讨论的属性的相关语义.

+++ 用实体集还是用联系集 +++
原则:在描述发生在实体间的行为用联系集.

+++ 二元联系集与n元联系集 +++
n元联系集可以更清晰的表示几个实体集参与到一个联系集中.

++ 映射约束 ++

+++ 映射的基数 +++
映射的基数,或基数比例,指明通过一个联系集能同另一实体向联系的实体数目.

对于二元联系集R,映射的基数情况有:
- 一对一;
- 一对多;
- 多对一;
- 多对多;


一对一或一对多联系集的属性可以放到参与的实体集之中,一对多将属性放到"多"的一方的实体集中,一对一放两方都行.

多对多将部分属性放在联系集中,而非实体集中.

+++ 存在依赖 +++
实体x的存在依赖于实体y的存在,y被删除,x也被删除.y称为支配实体,x称为从属实体.

全部参与和部分参与:
- 如果实体集E中的每个实体都参与到联系集R的至少一个联系中,称实体集E全部参与联系集R.
- 如果实体集E中只有部分实体参与到联系集R中,则称实体集E部分参与联系集R.


++ 码 ++
实体或联系在概念上是互异的,但从数据的观点来看,它们的区别必须用其属性来表明.

+++ 实体集 +++
超码是一个或多个属性的集合,这些属性的组合尅使我们在一个实体集中唯一的标识一个实体(足以成为区别于其他实体的标识符).

如果K是一个超码,那么K的任意超级也是超码.

任意真子集都不能成为超码.那么这样的最小超码成为候选码.(分割后的子集不足以成为区别其他的标识符)

被数据库设计者选中的,用来在同一实体集中区分不同实体的候选码成为主码.

+++ 联系集 +++
所有实体集主码的属性集合的并集.
```
primary-key(E1)∪primary-key(E2)∪...∪primary-key(En)
```
或者a1,a2等同联系集R相联系
```
primary-key(E1)∪primary-key(E2)∪...∪primary-key(En)∪{a1,a2,...,am}
```
描述了集合R的一个联系.

联系的主码结构依赖于联系集映射的基数.

- 多对多则由两个主码共同组成
- 多对一则由"一"的主码做联系集的主码
- 一对一则可由任意一方的主码做联系集的主码.


++ 实体-联系图 ++
E-R图主要构件:
- 矩形:表示实体集.(双边矩形表示弱实体集)
- 椭圆:表示属性.
- 菱形:表示联系集.(双菱形表示标识性联系)
- 线段:将属性链接到实体集或将实体集连接到联系集.
- 双椭圆:表示多值属性.
- 虚椭圆:表示派生属性.
- 双线:表示一个实体全部参与到联系集.

- 主码用下划线标注.(虚下划线表示弱实体集的分辨符)
- 箭头所指一方必须为"一",而非"多".如一对一或多对一.
- 线段则表示一对多或多对多.
- 在连接菱形和矩形的线上加标注来标识角色.


++ 弱实体集 ++
实体集的属性都不足以形成主码,则称为**弱实体集**.反之,有主码的实体集称作**强实体集**.

强实体集的成员必然是支配实体,而弱实体集的成员是从属实体.

弱实体集的分辨符是使我们能进行区分(区分实体集中依赖于某个特定强实体的所偶实体)的属性的集.,分辨符也称该实体集的**部分码**.

弱实体集的主码由该弱实体集所存在依赖的强实体集的主码以及该弱实体集的分辨符 共同组成.

标识的支配实体集拥有它所标识的弱实体集.这种联系成为标识性联系.

如果弱实体集只参与标识联系,且属性不多,则可选择用拥有实体集的多值,复合属性来表示弱实体集.
反之,如果弱实体集参与标识联系以外的联系,或属性较多,则建模时将其表达为弱实体集更适合.

++ 扩展E-R特性 ++
+++ 特殊化 +++
实体集中的某个实体子集可能具有不被该实体集中所有实体所共享的属性.
在实体集内部进行分组的过程叫做特殊化.特殊化可以多次,重叠.
可以反复使用特殊化来精简设计模式.

特殊化通过标记为"ISA(is a)"的三角形构件表示.

+++ 概括 +++
概括是高层实体集(超类)与一个或多个底层实体集(子类)间的包含关系.
特殊化为自顶而下的,而概括则是则下而上的,实则为特殊化的逆过程.

+++ 属性继承 +++
同高层实体集相联系的所有属性和联系也适用于它的所有底层实体集.
底层实体集特有的性质仅仅适用于某个特定的底层实体集.

+++ 约束设计 +++
- 成员资格约束:
  - 条件定义的.
    实体集对于某个高层实体集的属性进行评估,满足指定条件则可成其底层实体集.这种类型的概括称作是属性定义.
  - 用户定义的.
    直接将实体指派给某个实体集(非客观条件,主观决定).
- 不相交约束:
  - 不相交的.
  - 有重叠的.
    缺省情况下,底层实体是可以相互重叠的,而不相交约束必须显示的加到概括(特殊化)中.
- 全部性约束:
  - 全部的.每个高层实体必须属于一个底层实体.(如男的站左边,女的站右边)
  - 部分的.允许一些高层实体不属于任何底层实体.(如春哥即不站右边也不站左边)


由于对概括或特殊化运用了某些约束,因此可插入或删除的过程中产生某种需要(如依赖存在之类).

+++ 聚集 +++
聚集是一种抽象,联系被当作高层实体来看待.

++ 设计数据库的E-R模式 ++
值得考量的有:
- 用属性表示某个对象还是用实体集.
- 最准确描述现实世界中的某个概念是用实体集还是用联系集.
- 使用三元联系还是一对二元联系.
- 使用强实体集还是弱实体集.
- 使用概括是否合适.
- 使用聚集是否合适.


+++ 设计阶段 +++
- 第一阶段,需要刻画潜在数据库用户的数据需求.这一阶段的产品是"用户需求规格说明".

- 第二阶段,概念设计阶段.设计者选择数据模型,并利用所选数据库模型的概念将这些需求转化为数据库的概念模型.成为概念设计阶段,此阶段设计者关注的是如何描述数据以及相互关系,而不是物理存储细节.

  完善的概念模式还应指明企业的功能需求.在"功能需求规格说明"中,用户描述将在数据上进行的各类操作(或事务).设计者需要再次检查模式,看是否满足功能需求.

- 第三阶段,逻辑设计阶段.将高层概念模式映射到将被使用的DBMS的实际数据模型.

- 第四阶段,物理设计阶段.定义数据库的物理特征,包含文件组织格式和内部存储结构.


++ 将E-R模式转换为表 ++
E-R模式和关系数据库模型都是现实世界抽象的逻辑表示,由于两种模型采用比较类型的原则,因此可以将E-R设计转换为关系设计,过程为将数据库的表示从E-R图转换为表的形式.

+++ 用表表示强实体集 +++
可用一个表表示一个强实体集,每一列则为一个属性,每一行对应实体集中的一个实体.

+++ 用表表示弱实体集 +++
可用一个表表示一个弱实体集,结构为:其依赖的主实体集的主码,其本身的各属性.

例如:
- 有两个实体集,payment和loan,loan为支配实体集,payment为从属实体集.
- payment实体集所依赖的主实体集loan的主码为loan-number,
- payment实体集本身拥有的属性有payment-number,payment-date,payment-amount.
- 则将其转换为表形式,则为一个名为payment的表,其列有:loan-number,payment-number,payment-date,payment-amount.


+++ 用表表示联系集 +++
构成为:
参与该联系集的所有实体集的主码集合 ∪ 该联系集的描述性属性

- 表的冗余
  将弱实体集和相应强实体集关联的联系集为多对一,且没有描述性属性,所以不需要单独用一个表来表示该联系集.

- 表的合并
  实体集A,实体集B,A对B有依赖关系,则存在联系集AB.从A到B的映射基数为多对一.则可以将表A和表AB合并为一个并集的表.

