= Zend framework =
lds <lds2012[at]gmail.com>
{localdate}

:langage: php

.遗留问题:
***********************************************
    * Zend_Amf c3
    * Zend_application c4.4~end
    * zend_auth c5.3, c5.4(80%), c5.5, c5.6
    * zend_captcha c7(50%)
    * Zend_CodeGenerator c8
    * Zend_Console_Getopt
    * Zend_Controller c12.4(40%)
    * Zend_Currency c13
    * Zend_Date c14
    * Zend_Db c15.2(en), c15.3(en), c15.8(en), c15.9(en)
    * Zend_Dojo c17(I like jquery)
    * Zend_Feed c20(80%)
    * Zend_File c21
    * Zend_Filter_Inflector c22.6
    * Migrating from Previous Versions c22.7
    * ...
    * Zend_Loader c30(30%)
    * View Helper 61.4
************************************************

== 开启rewrite模块后 ==

`sudo a2enmod rewrite`
,设置httpd.conf里面设置AllowOverride all
关于frontController的在bootstrap进行设置,直接在index.php里面设置可能遇见问题(若不能覆盖重写application.ini中的设置)

== model ==

=== Model命名方式 === 

折腾好久才发现 1.10.* 的ZF .10.* 后Modular(多模块) model命名方法:

首先,你的application.ini中

[source, bash]
----------------------------------
;这排很好理解
resources.frontController.moduleDirectory = APPLICATION_PATH "/modules"
;这排才是关键
resources.modules[] =
--------------------------------------

这里说明下第二排的作用，官方手册是这样写的：

    Zend_Application_Resource_Modules is used to initialize your application modules. If your module has a Bootstrap.php file in its root, and it contains a class named Module_Bootstrap (where "Module" is the module name), then it will use that class to bootstrap the module.
    By default, an instance of Zend_Application_Module_Autoloader will be created for the module, using the module name and directory to initialize it.
    Since the Modules resource does not take any arguments by default, in order to enable it via configuration, you need to create it as an empty array. In INI style configuration, this looks like:
    resources.modules[] =

然后, 在你的模块目录下新建一个 `Bootstrap.php` 

[source, bash]
-----------------------------
<?php

class User_Bootstrap extends Zend_Application_Module_Bootstrap {

}

?>
-----------------------------
里面没有内容都可以，只要继承于 `Zend_Application_Module_Autoloader` 即可。

最后，你的model就可以使用旧的命名方式，如 `MyModuleName_Model_MyModelName` .

   
.旧版ZF命名方式：

默认model命名方式:
`class Default_Model_Persons`
=> modules/default/models/Persons.php`

`class Prefile_Model_LoginFormCheck`
=> modules/prefile/models/LoginFormCheck.php

NOTE: model的复数形式不一样,疑似大小写自动转换。但library中的命名规则更为严格,若要自动加载,路径和名称的大小写都得匹配

[source, bash]
--------------------------------------
// bootstrap.php

protected function _initAutoload() {
    $autoloader = new Zend_Application_Module_Autoloader(array(
        'namespace' => 'Default',
        'basePath' => dirname(__FILE__),
    ));

    return $autoloader;
}
----------------------------------
