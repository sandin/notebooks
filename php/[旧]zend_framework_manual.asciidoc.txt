= php maunal =
lds <lds2012@gmail.com>
{localdate}

:language: php
:encodeing: utf-8


.遗留问题
****************************************************

`REMOTE_ADDR`::
    正在浏览当前页面用户的 IP 地址。 

`declare (directive)`::
    statement

****************************************************

== 主要内容 ==

定界符文本表现的就和双引号字符串一样

NULL == '' //true

Xor（逻辑异或）
$a xor $b，如果 $a 或 $b 任一为 TRUE，但不同时是。 

在 PHP 中可以调用递归函数。但是要避免递归函数／方法调用超过 100-200 层(递归超过100会报错)

从函数返回一个引用
[source]
----------------------------------------
<?php
function &returns_reference()
{
    return $someref;
}

$newref =& returns_reference();
?> 

//变量函数示例
<?php
function foo() {
    echo "In foo()<br />\n";
}

function bar($arg = '') {
    echo "In bar(); argument was '$arg'.<br />\n";
}

// This is a wrapper function around echo
function echoit($string)
{
    echo $string;
}

$func = 'foo';
$func();        // This calls foo()

$func = 'bar';
$func('test');  // This calls bar()

$func = 'echoit';
$func('test');  // This calls echoit()
?>  
----------------------------------------

.解释代码
[source]
----------------------------------------
<?php

class A 
{
    public  $name = 'liudingsaqn';
    private $age  = 23;
    public  $arr  = array(1,2,3,4);

    public function getName()
    {
        //var_dump($this->name);
    }

    public function staticFun()
    {
        var_dump('static');
    }
}

$a = new A();
$a->getName();

//序列化
$serialize = serialize($a);
//var_dump($serialize);

//反序列化，必须确定该序列化对象所属的类定义包含在当前文件中
//反序列化的过程，其实是根据序列的字符串重新实例化对象的过程。
$aa = unserialize($serialize);
$aa->getName();

//转换为数组,会暴露private属性
$arr = (array) $a;



/*
    //循环对象
    foreach ($a as $value)
    {
        var_dump($value);
    }
 */

$arr = array(1,2,3,4);
//$arr = array('name' => 'liudingsan','age' => 23);
$newArr = array_chunk($arr,3);
//var_dump($newArr);

$array1 = array ("a" => "green", "b" => "brown", "c" => "blue", "red",'black');

//var_dump($array1);

//将array('a','b')当一个value填充进去，而非a,b分开作为元素填充
$array2 = array_fill(2,2,array('a','b'));
//var_dump($array2);


$arr1 = array(2,1,3,4);  //升序
$arr2 = array(9,8,7,6);  //降序

array_multisort($arr1,$arr2);

//var_dump($arr1);
//var_dump($arr2);

$ar = array(
       array("10", 11, 100, 100, "a"),
       array(   1,  2, "2",   3,   1)
      );
//根据第一个arr进行 行 排序
array_multisort(
                $ar[1], SORT_NUMERIC, SORT_DESC,
                $ar[0], SORT_ASC, SORT_STRING);
//var_dump($ar);

$last = array_pop($arr);
//var_dump($arr);
//var_dump($last);
$arr[] = 100;
//var_dump($arr);
$random = array_rand($arr,2);
//var_dump($arr);
//var_dump($random);



$arr = array('r','g','b','y');

$r = array_splice($arr,1,0,'p');
//var_dump($arr);
//
$sweet = array('a' => 'apple', 'b' => 'banana');
$fruits = array('sweet' => $sweet, 'sour' => 'lemon');

function test_print(&$item, $key)
{
    $item =  "$key holds $item\n";
}

array_walk_recursive($fruits, 'test_print');
//var_dump($fruits);

//双引号中必须用花括号引用数组元素
$foo = array('bar' => 'baz',array('name' => 'lds'));
var_dump("Hello {$foo[0]['name']}!"); // Hello baz!

$arr = array('c','b','a',array('d','f'));
asort($arr);
var_dump( array_search('b',$arr) );
//var_dump($arr);

$foo = array("bob", "fred", "jussi", "jouni", "egon", "marliese");
$bar = each($foo);
//var_dump($bar);


$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");
sort($fruits);

var_dump($fruits);

$info = array('coffee', 'brown', 'caffeine');

// Listing all the variables
list($drink, $color, $power) = $info;
echo "$drink is $color and $power makes it special.\n";

// Listing some of them
list($drink, , $power) = $info;
echo "$drink has $power.\n";

// Or let's skip to only the third one
list( , , $power) = $info;
echo "I need $power!\n";


$str = false;// '' , 0 
var_dump($str);
var_dump(empty($str));
?>
-------------------------------------------------
